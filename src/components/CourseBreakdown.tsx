import { useState } from "react";
import { Button } from "@/components/ui/button";
import { ChevronDown, Download, Calendar, Clock, Target } from "lucide-react";
import { useTranslation } from "@/hooks/useTranslation";

const CourseBreakdown = () => {
  const [expandedDay, setExpandedDay] = useState<number | null>(1);
  const { t, tArray } = useTranslation();

  const toggleDay = (day: number) => {
    setExpandedDay(expandedDay === day ? null : day);
  };

  return (
    <section className="py-20 bg-gradient-to-b from-muted/20 to-background">
      <div className="max-w-6xl mx-auto px-6">
        <div className="text-center mb-16 fade-in-up">
          <h2 className="text-4xl md:text-5xl font-bold text-foreground mb-6">
            {t('courseTitle')}
          </h2>
          <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
            {t('benefitsSubtitle')}
          </p>
        </div>

        <div className="space-y-4">
          {Array.from({ length: 5 }).map((_, index) => {
            const day = index + 1;
            return (
              <div
                key={day}
                className="day-card overflow-hidden fade-in-up"
                style={{ animationDelay: `${day * 0.1}s` }}
              >
                <div
                  className="p-6 cursor-pointer flex items-center justify-between hover:bg-muted/50 transition-colors"
                  onClick={() => toggleDay(day)}
                >
                  <div className="flex items-center gap-4">
                    <div className="flex-shrink-0 w-12 h-12 bg-primary rounded-lg flex items-center justify-center text-primary-foreground font-bold text-lg">
                      {day}
                    </div>
                    <div>
                      <h3 className="text-xl font-semibold text-foreground mb-1">
                        {t(`day${day}Title`)}
                      </h3>
                    </div>
                  </div>

                  <div className="flex items-center gap-4">
                    <div className="hidden sm:flex items-center gap-2 text-sm text-muted-foreground">
                      <Clock className="h-4 w-4" />
                      <span data-i18n={`day${day}Duration`}></span>
                    </div>
                    <ChevronDown
                      className={`h-5 w-5 text-muted-foreground transition-transform duration-200 ${
                        expandedDay === day ? 'rotate-180' : ''
                      }`}
                    />
                  </div>
                </div>

                <div
                  className={`accordion-content overflow-hidden ${
                    expandedDay === day
                      ? 'max-h-[600px] opacity-100 expanded'
                      : 'max-h-0 opacity-0 collapsed'
                  }`}
                >
                  <div className="px-6 pb-6 border-t border-border">
                    <div className="grid md:grid-cols-2 gap-6 mt-4">
                      <div className="space-y-3">
                        <div className="flex items-center gap-2">
                          <Target className="h-5 w-5 text-primary" />
                          <h4 className="label" data-i18n="keyTopicsLabel">
                            Key Topics:
                          </h4>
                        </div>
                        <ul className="space-y-2">
                          {tArray(`day${day}Topics`).map((topic, idx) => (
                            <li key={idx} className="flex items-start gap-2">
                              <div className="h-1.5 w-1.5 bg-primary rounded-full mt-2 flex-shrink-0"></div>
                              <span className="text-muted-foreground">{topic}</span>
                            </li>
                          ))}
                        </ul>
                      </div>

                      <div className="space-y-3">
                        <div className="flex items-center gap-2">
                          <Calendar className="h-5 w-5 text-primary" />
                          <h4 className="label" data-i18n="techniquesCoveredLabel">
                            Techniques Covered:
                          </h4>
                        </div>
                        <ul className="space-y-2" data-i18n-list={`day${day}Techniques`}>
                          {/* List items will be generated by i18n.js */}
                        </ul>
                      </div>
                    </div>

                    <div className="mt-6 pt-4 border-t border-border">
                      <Button
                        variant="outline"
                        className="group hover:bg-primary/10 hover:border-primary transition-all duration-300 hover:scale-105 hover:shadow-lg"
                        onClick={(e) => {
                          e.stopPropagation();
                          window.open('#', '_blank');
                        }}
                      >
                        <Download className="h-4 w-4 mr-2 group-hover:animate-bounce" />
                        <span data-i18n="downloadDayLabel">Download Day</span>{' '}
                        <span>{day}</span>{' '}
                        <span data-i18n="summaryPdfLabel">Summary (PDF)</span>
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            )
          })}
        </div>
      </div>
    </section>
  );
};

export default CourseBreakdown;
